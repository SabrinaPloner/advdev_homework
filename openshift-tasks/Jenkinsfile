#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/7668-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml -B"
    // project prefix
    def guid      = "${GUID}"
    // git repository
    def repo      = "${REPO}"
    // cluster URL
    def cluster   = "${CLUSTER}"
    // sonar URL
    def sonar     = "http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000"

    // Checkout Source Code.
    stage('Checkout Source') {
      // checkout scm ${repo
      git url: "${repo}"
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // Set the tag for the development image: version + build number
      def devTag  = "${version}-${currentBuild.number}"
      // Set the tag for the production image: version
      def prodTag = "${version}"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"
        // Execute Maven Build
        sh "$mvnCmd clean package -DskipTests"

      }

      stage('parallel: Test and Code Analysis') {
          parallel(
            test: {
              echo "Running Unit Tests"
              sh "$mvnCmd test"
            },
            analysis: {
              echo "Running Code Analysis"
              sh "$mvnCmd sonar:sonar -Dsonar.host.url=${sonar}"
            }
          )
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
        sh "$mvnCmd deploy -DskipTests=true \
        -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        // Build Image, tag Image
        script {
          openshift.withCluster() {
            openshift.withProject("${guid}-tasks-dev") {
              def build = openshift.startBuild("tasks", "--from-file=/home/jenkins/workspace/7668-jenkins/7668-jenkins-tasks-pipeline/openshift-tasks/target/openshift-tasks.war", "--wait=true")
              openshift.tag("tasks:latest", "tasks:${devTag}")
            }
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding

        // Set the environment variable VERSION on the tasks deployment config in the test project to '${devTag} (tasks-dev)'.

        script {
          openshift.withCluster() {
            openshift.withProject("${guid}-tasks-dev") {
              openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc:5000/${guid}-tasks-dev/tasks:${devTag}")
              openshift.set("env", "dc/tasks", "VERSION='${devTag} tasks-dev'")
              openshift.selector("dc", "tasks").rollout().latest()

              def dc = openshift.selector("dc", "tasks").object()
              def dc_version = dc.status.latestVersion
              def rc = openshift.selector("rc", "tasks-${dc_version}").object()

              echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
              while (rc.spec.replicas != rc.status.readyReplicas) {
                sleep 5
                rc = openshift.selector("rc", "tasks-${dc_version}").object()
              }
            }
          }
        }

      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        script {
          // Copy image to Nexus container registry
          sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat docker://docker-registry.default.svc:5000/7668-tasks-dev/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"

          // Tag the built image with the production tag.
          openshift.withCluster() {
            openshift.withProject("${guid}-tasks-dev") {
              openshift.tag("${guid}-tasks-dev/tasks:${devTag}", "${guid}-tasks-dev/tasks:${prodTag}")
            }
          }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        script {
          openshift.withCluster() {
            openshift.withProject("${guid}-tasks-prod") {

              // Set Version
              openshift.set("env", "dc/tasks-blue", "VERSION='${prodTag} tasks-blue'")
              openshift.set("env", "dc/tasks-green", "VERSION='${prodTag} tasks-green'")

              // Determine which application is active
              activeApp = openshift.selector("route", "tasks").object().spec.to.name
              if (activeApp == "tasks-green") {
                destApp = "tasks-blue"
              }
              echo "Active Application:      " + activeApp
              echo "Destination Application: " + destApp

              //      Set Image
              def dc = openshift.selector("dc/${destApp}").object()

              dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${guid}-tasks-dev/tasks:${prodTag}"

              openshift.apply(dc)

              //      Deploy into the other application
              openshift.selector("dc", "${destApp}").rollout().latest();

              //      Make sure the application is running and ready before proceeding
              def dc_prod = openshift.selector("dc", "${destApp}").object()
              def dc_version = dc_prod.status.latestVersion
              def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
              echo "Waiting for ${destApp} to be ready"
              while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
                sleep 5
                rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
              }
            }
          }
        }
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // Execute switch
        script {
          openshift.withCluster() {
            openshift.withProject("${guid}-tasks-prod") {
              openshift.set("route-backends", "tasks", "${destApp}=100", "${activeApp}=0")
            }
          }
        }
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
